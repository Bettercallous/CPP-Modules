

I chose std::map because it provides a convenient way to store key-value pairs, where the keys are dates and the values are exchange rates.
Additionally, std::map automatically sorts its elements by key, which makes it easy to find the closest date to the input date efficiently
using lower_bound.


std::istringstream is a class provided by the C++ Standard Library that allows you to treat strings as input streams. It is part of the <sstream> header.

It behaves similarly to std::cin, but instead of reading input from the console, it reads input from a string. You can use it to extract formatted data from a string just as you would from the standard input (std::cin).

Typically, you would use std::istringstream when you need to parse or extract values from a string, for example, when you want to convert a string representation of a number into an actual numerical type or extract data from a formatted string.

In summary, std::istringstream provides a convenient way to read data from a string as if it were an input stream.