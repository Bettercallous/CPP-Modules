std::vector  :   https://cplusplus.com/reference/vector/vector/

std::vector  :   https://cplusplus.com/reference/vector/vector/

at()



* In general programming, a container is a data type that provides storage for a collection of unnamed objects (called elements).
We typically use containers when we need to work with a set of related values.

As it turns out, you’ve already been using one container type: strings! A string container provides storage for a collection of characters,
which can then be output as text.

While the container object itself typically has a name (otherwise how would we use it?), the elements of a container are unnamed.
This is so that we can put as many elements in our container as we desire, without having to give each element a unique name! This lack
of named elements is important, and is what distinguishes containers from other types of data structures. It is why plain structs typically
aren’t considered containers -- their data members require unique names.

In the example above, our string container has a name (name), but the characters inside the container ('A', 'l', 'e', 'x') do not.

But if the elements themselves are unnamed, how do we access them? Each container provides one or more methods to access its
elements -- but exactly how depends on the type of container.

- The elements of a container do not have their own names, so that the container can have as many elements as we want without
having to give each element a unique name.

- Each container provides some method to access these elements, but how depends on the specific type of container.

* In C++, the definition of “container” is narrower than the general programming definition. Only the class types in the Containers library
are considered to be containers in C++. We will use the term “container” when talking about containers in general, and “container class”
when talking specifically about the container class types that are part of the Containers library.

The following types are containers under the general programming definition, but are not considered to be containers by the C++ standard:

C-style arrays
std::string
std::vector<bool>

Of the provided container classes, std::vector and std::array see by far the most use, and will be where we focus the bulk of our attention.
The other containers classes are typically only used in more specialized situations.

// Introduction to arrays

An array is a container data type that stores a sequence of values contiguously (meaning each element is placed in an adjacent memory
location, with no gaps). Arrays allow fast, direct access to any element. They are conceptually simple and easy to use, making them
the first choice when we need to create and work with a set of related values.

C++ contains three primary array types: (C-style) arrays, the std::vector container class, and the std::array container class.

(C-style) arrays were inherited from the C language. For backwards compatibility, these arrays are defined as part of the core C++ language
(much like the fundamental data types). The C++ standard calls these “arrays”, but in modern C++ these are often called C arrays
or C-style arrays in order to differentiate them from the similarly named std::array. C-style arrays are also sometimes called “naked arrays”,
“fixed-sized arrays”, “fixed arrays”, or “built-in arrays”. We’ll prefer the term “C-style array”, and use “array” when discussing array types
in general. By modern standards, C-style arrays behave strangely and they are dangerous.

To help make arrays safer and easier to use in C++, the std::vector container class was introduced in C++03. std::vector is the most flexible
of the three array types, and has a bunch of useful capabilities that the other array types don’t.

Finally, the std::array container class was introduced in C++11 as a direct replacement for C-style arrays. It is more limited than std::vector,
but can also be more efficient, especially for smaller arrays.